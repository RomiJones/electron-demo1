#include <node.h>

#ifdef WIN32
#include <windows.h>
#endif

namespace demo {
	void Method_f1(const v8::FunctionCallbackInfo<v8::Value>& args) {
#ifdef WIN32
		::MessageBox(NULL, L"调用本地api", L"测试123", 0);
#endif
		v8::Isolate* isolate = args.GetIsolate();
		args.GetReturnValue().Set(v8::String::NewFromUtf8(isolate, "niubi test string"));
	}

	void Method_getCurrentProcessId(const v8::FunctionCallbackInfo<v8::Value>& args) {
        unsigned long processId = 0;
#ifdef WIN32
		processId = GetCurrentProcessId();
#elif defined(_EMACLE_OSX_)
        processId = getpid();
#endif
		v8::Isolate* isolate = args.GetIsolate();
		args.GetReturnValue().Set(v8::Number::New(isolate, processId));
	}

	void init(v8::Local<v8::Object> exports) {
		NODE_SET_METHOD(exports, "f1", Method_f1);
		NODE_SET_METHOD(exports, "getCurrentProcessId", Method_getCurrentProcessId);
	}

	NODE_MODULE(hello, init)

}  // namespace demo
